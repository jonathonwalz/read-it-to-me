{"version":3,"file":"read-it-to-me.min.js","sources":["../../src/js/group.js","../../src/js/events.js","../../src/js/utils.js","../../src/js/read-it-to-me.js","../../src/js/synthesis.js","../../src/js/dom.js","../../src/js/control-bar.js","../../src/js/index.js"],"sourcesContent":["export const PLAYING_STATE = {\n  STOPPED: 0,\n  PAUSED: 1,\n  PLAYING: 2\n};\n\nexport function createRITMGroup({playPauseGroup, cancelAudio, focusClassName, ritmDisabledClassName, ritmOptionalTrackingIdentifier, elem, text}, {wrapperElement, controlBubbleElement, document}) {\n  // Inner wrap each readable group in a new div.read-this-to-me\n  const wrapper = wrapperElement || document.createElement('div');\n  wrapper.classList.add('read-this-to-me');\n\n  if (!wrapperElement) {\n    elem.appendChild(wrapper);\n    while (elem.firstChild !== wrapper) {\n      wrapper.appendChild(elem.firstChild);\n    }\n  }\n\n  // build the control bubble\n  const controlBubble = controlBubbleElement || document.createElement('div');\n  controlBubble.classList.add('read-it-to-me-control-bubble');\n  controlBubble.tabIndex = -1;\n  controlBubble.innerHTML = '<p class=\"read-it-to-me-label\"></p><button type=\"button\" class=\"play-pause-resume\"></button><button type=\"button\" class=\"cancel-audio\"><span class=\"visually-hidden\">Cancel audio</a></button>';\n\n  const pausePlayButton = controlBubble.querySelector('button.play-pause-resume');\n  const cancelButton = controlBubble.querySelector('button.cancel-audio');\n\n  const focusInListener = e => {\n    // don't want this bubbling up from nested groups\n    e.stopPropagation();\n\n    elem.classList.add(focusClassName);\n  };\n\n  const focusOutListener = e => {\n    // don't want this bubbling up from nested groups\n    e.stopPropagation();\n\n    elem.classList.remove(focusClassName);\n  };\n\n  const playPauseListener = e => {\n    e.stopPropagation();\n    playPauseGroup(group);\n  };\n\n  const cancelListener = cancelAudio(controlBubble);\n\n  const setReadItToMe = enabled => {\n    if (enabled) {\n      elem.classList.remove(ritmDisabledClassName);\n    }\n    else {\n      elem.classList.add(ritmDisabledClassName);\n    }\n    pausePlayButton.disabled = !enabled;\n    cancelButton.disabled = !enabled;\n  };\n\n  const setState = state => {\n    group.state = state;\n\n    if (state === PLAYING_STATE.STOPPED) {\n      elem.classList.remove('read-it-to-me-play');\n      elem.classList.remove('read-it-to-me-pause');\n    } else if (state === PLAYING_STATE.PLAYING) {\n      elem.classList.add('read-it-to-me-play');\n      elem.classList.remove('read-it-to-me-pause');\n    } else if (state === PLAYING_STATE.PAUSED) {\n      elem.classList.remove('read-it-to-me-play');\n      elem.classList.add('read-it-to-me-pause');\n    }\n  };\n\n  const destroy = () => {\n    controlBubble.removeEventListener('focusin', focusInListener);\n    controlBubble.removeEventListener('focusout', focusOutListener);\n    pausePlayButton.removeEventListener('click', playPauseListener);\n    cancelButton.removeEventListener('click', cancelListener);\n  };\n\n  controlBubble.addEventListener('focusin', focusInListener);\n  controlBubble.addEventListener('focusout', focusOutListener);\n  pausePlayButton.addEventListener('click', playPauseListener);\n  cancelButton.addEventListener('click', cancelListener);\n\n  if (!controlBubbleElement) {\n    elem.insertBefore(controlBubble, wrapper);\n  }\n\n  const group = {\n    setReadItToMe,\n    setState,\n    state: PLAYING_STATE.STOPPED,\n    destroy,\n    text,\n    ritmOptionalTrackingIdentifier\n  };\n\n  return group;\n}","function nullEvent() {}\n\nfunction eventHandlerWrapper(handler) {\n  return event => {\n    try {\n      handler(event);\n    } catch (e) {}\n  };\n}\n\nexport function initEventTracking() {\n  const eventsBin = {\n    play: nullEvent,\n    pause: nullEvent,\n    cancel: nullEvent,\n    toggle: nullEvent\n  };\n\n  function setHandlers(obj) {\n    if (obj) {\n      if (obj.play && typeof obj.play === 'function') {\n        eventsBin.play = eventHandlerWrapper(obj.play);\n      }\n      if (obj.pause && typeof obj.pause === 'function') {\n        eventsBin.pause = eventHandlerWrapper(obj.pause);\n      }\n      if (obj.cancel && typeof obj.cancel === 'function') {\n        eventsBin.cancel = eventHandlerWrapper(obj.cancel);\n      }\n      if (obj.toggle && typeof obj.toggle === 'function') {\n        eventsBin.toggle = eventHandlerWrapper(obj.toggle);\n      }\n    }\n  }\n\n  return {eventsBin, setHandlers};\n}","export const ritmDisabledClassName = 'ritm-disabled';\nexport const groupClassName = 'read-it-to-me-content-group';\nexport const focusClassName = 'focusin';\n\nexport let getPlainTextWithPsuedoSemantics = (textAncestor) => {\n  // In a copy of the node list, pepper in (dramatically misuse, hehe) some punctuation for the purpose of adding meaningful pauses and 'emphasis' during text readout.\n  let clonedTextAncestor = textAncestor.cloneNode(true);\n  clonedTextAncestor.querySelectorAll('p, li, abbr, strong, em, h1, h2, h3, h4, h5, h6').forEach((elem) => {\n    let tag = elem.tagName.toUpperCase();\n    if (tag === 'P') {\n      elem.appendChild(document.createTextNode('. '));\n    }\n    else if (tag === \"ABBR\") {\n      let elemText = elem.textContent;\n      let arr = elemText.split('');\n      elem.textContent = arr.join('.');\n    }\n    else if (tag === 'STRONG' || tag === 'EM') {\n      elem.insertBefore(document.createTextNode(', '), elem.firstChild);\n      elem.appendChild(document.createTextNode(', '));\n    }\n    else if (tag === 'LI') {\n      elem.appendChild(document.createTextNode(', '));\n    }\n    else if (tag === 'H1' || tag === 'H2' || tag === 'H3' || tag === 'H4' || tag === 'H5' || tag === 'H6') {\n      elem.appendChild(document.createTextNode(', '));\n    }\n  });\n\n  // return the modified text\n  return clonedTextAncestor.textContent;\n};","import {initSynthesis} from './synthesis';\nimport {PLAYING_STATE} from './group';\nimport {initEventTracking} from './events';\nimport {focusClassName} from './utils';\n\nlet synth;\nlet ui;\nlet nextGroup;\nlet ritmEnabled = true;\nconst {eventsBin, setHandlers} = initEventTracking();\n\nlet setup = (uiConfig) => {\n  ui = uiConfig;\n\n  // Toggle RITM off if set as disabled in sessionStorage\n  if (sessionStorage.getItem('readItToMeDisabled')) {\n    setReadItToMe(false);\n  }\n};\n\nlet clearStrayFocus = () => {\n  let strayFocus = document.querySelector(`.${focusClassName}`);\n  if (strayFocus) {\n    strayFocus.classList.remove(focusClassName);\n  }\n};\n\nlet setReadItToMe = (enabled, logEvent) => {\n  if (enabled) {\n    ritmEnabled = true;\n    sessionStorage.removeItem('readItToMeDisabled');\n  }\n  else {\n    ritmEnabled = false;\n    clearStrayFocus();\n    nextGroup = null;\n    synth.cancel();\n    sessionStorage.setItem('readItToMeDisabled', '1');\n  }\n\n  ui.setReadItToMe(ritmEnabled);\n\n  // optional track toggle event\n  if (logEvent) {\n    eventsBin.toggle(enabled);\n  }\n};\n\nlet cancelAudio = toFocus => function() {\n  // optional track cancel event\n  eventsBin.cancel();\n  // move focus to appropriate place, because the cancel button is about to disappear\n  if (toFocus.contains(this)) {\n    toFocus.focus();\n  }\n  cancel();\n};\n\nlet playPauseGroup = (group) => {\n  if (synth.currentUtterance && synth.currentUtterance.config.group === group && group.state !== PLAYING_STATE.STOPPED) {\n    if (group.state === PLAYING_STATE.PAUSED) {\n      resume();\n    } else if (group.state === PLAYING_STATE.PLAYING) {\n      pause();\n    }\n  } else {\n    nextGroup = group;\n    if (synth.currentUtterance) {\n      cancel();\n    } else {\n      play();\n    }\n  }\n};\n\nlet utteranceEnd = (e, config) => {\n  config.group.setState(PLAYING_STATE.STOPPED);\n\n  if (nextGroup) {\n    play();\n  } else {\n    ui.hideControlBar();\n    ui.hideCancelButton();\n  }\n};\n\nlet play = () => {\n  // setup the new utterance\n  const config = {text: nextGroup.text(), group: nextGroup};\n  nextGroup.setState(PLAYING_STATE.PLAYING);\n  nextGroup = null;\n\n  synth.play(config, utteranceEnd);\n  ui.showCancelButton();\n  ui.showControlBar();\n\n  // optional track play event\n  eventsBin.play();\n};\n\nlet pause = () => {\n  if (synth.currentUtterance) {\n    synth.pause();\n    synth.currentUtterance.config.group.setState(PLAYING_STATE.PAUSED);\n\n    // optional track pause event\n    eventsBin.pause();\n  }\n};\n\nlet resume = () => {\n  if (synth.currentUtterance) {\n    synth.resume();\n    synth.currentUtterance.config.group.setState(PLAYING_STATE.PLAYING);\n  }\n};\n\nlet cancel = () => {\n  ui.hideCancelButton();\n  synth.cancel();\n};\n\nexport function init(setupUI, callback) {\n  initSynthesis(undefined, (error, synthesis) => {\n    if (!error && synthesis) {\n      synth = synthesis;\n\n      const config = setupUI({playPauseGroup, cancelAudio, setReadItToMe});\n\n      if (!(config && config.hideControlBar && config.hideCancelButton && config.showCancelButton && config.showControlBar && config.setReadItToMe)) {\n        error = new Error('UI library did not provide necessary callbacks.');\n      } else {\n        setup(config);\n      }\n    }\n\n    callback(error);\n  });\n}\n\nexport function isEnabled () {\n  return ritmEnabled;\n}\n\nexport function currentUtteranceIdentifier() {\n  return (currentGroup && currentGroup.ritmOptionalTrackingIdentifier) || false;\n}\n\nexport const eventTracking = setHandlers;","export function initSynthesis(synth, callback) {\n  let voices = [], failedToLoadVoices = false;\n\n  if (!synth && typeof speechSynthesis !== 'undefined') {\n    synth = speechSynthesis;\n  }\n\n  if (!synth) {\n    callback(new Error('Speech Synthesis is unavailable.'));\n    return;\n  }\n\n  let play = (config, callback = () => {}) => {\n    const u = new SpeechSynthesisUtterance(config.text);\n    u.lang = 'en-US';\n    u.rate = .8;\n    //if voices is populated and the 'Samantha' voice is present on the browser/device, load her up, otherwise don't set a voice so the default is allowed to do it's thing.\n    if (voices.length > 0) {\n      for (let i = 0; i < voices.length; i++) {\n        if (voices[i].lang.indexOf('en') === 0) {\n          if (voices[i].name === 'Samantha') {\n            u.voice = voices[i];\n            break;\n          }\n        }\n      }\n    }\n\n    function utteranceFinished(error) {\n      thisUtterance.finished = true;\n      result.currentUtterance = null;\n\n      setTimeout(() => callback(error, config), 100);\n    }\n\n    u.onend = () => utteranceFinished();\n\n    u.onerror = event => utteranceFinished(event);\n\n    const thisUtterance = result.currentUtterance = {u, config};\n\n    // speak the new utterance\n    synth.speak(u);\n  };\n\n  let pause = () => {\n    synth.pause();\n  };\n\n  let resume = () => {\n    synth.resume();\n  };\n\n  let cancel = () => {\n    synth.cancel();\n  };\n\n  const result = {play, pause, resume, cancel};\n\n  //populate voices [chrome currently will only do this in the context of the onvoiceschanged event]\n  voices = synth.getVoices();\n  if (voices.length === 0) {\n    if (synth.onvoiceschanged !== undefined) {\n      synth.onvoiceschanged = function () {\n        voices = synth.getVoices();\n        callback(null, result);\n      };\n    } else {\n      failedToLoadVoices = true;\n    }\n  }\n\n  // without this initial cancel, Chrome will pretty consistently fail to play the very first utterance (then works on every other utterance)\n  synth.cancel();\n\n  if (!voices.length && failedToLoadVoices) {\n    callback(new Error('Unable to load voice list'));\n  } else if (voices.length) {\n    callback(null, result);\n  }\n}\n","import {createControlBar} from './control-bar';\nimport {createRITMGroup} from './group';\nimport {getPlainTextWithPsuedoSemantics, groupClassName, focusClassName, ritmDisabledClassName} from './utils';\n\nexport function init(initRITM, selectors) {\n  // If there's nothing to read, don't initialize\n  if (!((selectors && document.querySelectorAll(selectors).length > 0) || document.querySelectorAll(`.${groupClassName}`).length > 0)) {\n    return;\n  }\n\n  function setupUI({playPauseGroup, cancelAudio, setReadItToMe}) {\n    // if custom selectors were passed in, give the associated elements the default group class\n    if (selectors && document.querySelectorAll(selectors).length > 0) {\n      document.querySelectorAll(selectors).forEach((elem) => {\n        elem.classList.add(groupClassName);\n      });\n    }\n\n    let controlBar;\n    let contentGroups = [];\n\n    const groupSelectorElements = document.querySelectorAll(`.${groupClassName}`);\n    groupSelectorElements.forEach((elem) => {\n      const text = () => getPlainTextWithPsuedoSemantics(elem.querySelector('.read-this-to-me'));\n      const ritmOptionalTrackingIdentifier = elem.dataset.ritmOptionalTrackingIdentifier || false;\n      const group = createRITMGroup({playPauseGroup, cancelAudio, focusClassName, ritmDisabledClassName, elem, ritmOptionalTrackingIdentifier, text}, {document});\n\n      contentGroups.push(group);\n    });\n\n    // build the control bar\n    controlBar = createControlBar({cancelAudio, setReadItToMe}, {document});\n\n    function uiSetReadItToMe(enabled) {\n      controlBar.setReadItToMe(enabled);\n      contentGroups.forEach(group => group.setReadItToMe(enabled));\n    }\n\n    return {\n      hideControlBar: controlBar.hideControlBar,\n      hideCancelButton: controlBar.hideCancelButton,\n      showCancelButton: controlBar.showCancelButton,\n      showControlBar: controlBar.showControlBar,\n      setReadItToMe: uiSetReadItToMe\n    }\n  }\n\n  initRITM(setupUI, error => {\n    if (error) {\n      // strip out classes that would apply ReadItToMe visuals\n      document.querySelectorAll(`.${groupClassName}`).forEach((elem) => {\n        elem.classList.remove(groupClassName, focusClassName);\n      });\n    }\n  });\n}","export function createControlBar({cancelAudio, setReadItToMe}, {document, controlBarElement}) {\n  // build the control bar\n  const controlBar = controlBarElement || document.createElement('div');\n  controlBar.classList.add('read-it-to-me-control-bar');\n  controlBar.setAttribute('tabindex', '0');\n  controlBar.setAttribute('aria-describedby', 'ritm-sr-message');\n  controlBar.innerHTML = `<div class=\"toggle-wrapper\">\n                            <p class=\"visually-hidden\" id=\"ritm-sr-message\">Screen-reader users: there is a rudimentary \"on-demand\" read-aloud feature in use on this page called \"Read-it-to-Me\".  This new feature, which isn't meant as a screen-reader alternative, adds more tabable areas in the document which are great for keyboard users not using screen-readers, but are likely to be annoying for you. You can toggle off/on \"Read-it-to-Me\" using this checkbox.</p>\n                            <p class=\"read-it-to-me-label\">Toggle Read-it-to-Me</p>\n                            <label class=\"switch\" aria-label=\"Toggle Read-it-to-Me.\" aria-describedby=\"ritm-sr-message\">\n                              <input type=\"checkbox\" class=\"switch-input\" checked>\n                              <span class=\"switch-outline\"></span>\n                              <span class=\"switch-label\" data-on=\"On\" data-off=\"Off\"></span>\n                              <span class=\"switch-handle\"></span>\n                            </label>\n                          </div>\n                          <div class=\"cancel-audio-wrapper\">\n                            <button type=\"button\" class=\"btn btn-default btn-lg\">Cancel audio</button>\n                          </div>`;\n\n  const cancelButton = controlBar.querySelector('button');\n  const inputSwitch = controlBar.querySelector('input.switch-input');\n\n  const toggleReadItToMe = (e) => {\n    setReadItToMe(e.target.checked, true);\n  };\n\n  const setReadItToMeStatus = status => inputSwitch.checked = status;\n\n  const controlBarFocusIn = (e) => {\n    if (e.target && controlBar.contains(e.target)) {\n      if (!controlBar.classList.contains('control-bar-show')) {\n        showControlBar();\n      }\n    }\n  };\n\n  const controlBarFocusOut = (e) => {\n    if ((e.relatedTarget && !controlBar.contains(e.relatedTarget)) || !e.relatedTarget) {\n      hideControlBar();\n    }\n  };\n\n  const showCancelButton = () => {\n    controlBar.classList.add('show-ritm-cancel');\n  };\n\n  const hideCancelButton = () => {\n    controlBar.classList.remove('show-ritm-cancel');\n  };\n\n  const showControlBar = () => {\n    controlBar.classList.add('control-bar-show');\n  };\n\n  const hideControlBar = () => {\n    controlBar.classList.remove('control-bar-show');\n  };\n\n  cancelButton.addEventListener('click', cancelAudio(controlBar));\n  inputSwitch.addEventListener('change', toggleReadItToMe);\n  controlBar.addEventListener('focusin', controlBarFocusIn);\n  controlBar.addEventListener('focusout', controlBarFocusOut);\n\n  if (!controlBarElement) {\n    // append the control bar to body where it's least likely to be effected by layout styling and the control bubble so we can attach events to it.\n    let docBody = document.body;\n    docBody.insertBefore(controlBar, docBody.firstChild);\n  }\n\n  return {\n    showCancelButton,\n    hideCancelButton,\n    showControlBar,\n    hideControlBar,\n    setReadItToMe: setReadItToMeStatus\n  };\n}","import '../scss/read-it-to-me.scss';\n\nimport * as ritm from './read-it-to-me';\nimport {init as domInit} from './dom';\n\nexport const initRITM = ritm.init;\nexport const isEnabled = ritm.isEnabled;\nexport const currentUtteranceIdentifier = ritm.currentUtteranceIdentifier;\nexport const eventTracking = ritm.eventTracking;\n\nexport function init(selectors) {\n  return domInit(ritm.init, selectors);\n}"],"names":["PLAYING_STATE","STOPPED","PAUSED","PLAYING","nullEvent","eventHandlerWrapper","handler","event","e","synth","ui","nextGroup","ritmDisabledClassName","groupClassName","focusClassName","getPlainTextWithPsuedoSemantics","textAncestor","clonedTextAncestor","cloneNode","querySelectorAll","forEach","elem","tag","tagName","toUpperCase","appendChild","document","createTextNode","arr","textContent","split","join","insertBefore","firstChild","ritmEnabled","eventsBin","play","pause","cancel","toggle","setHandlers","obj","initEventTracking","setup","uiConfig","sessionStorage","getItem","setReadItToMe","enabled","logEvent","strayFocus","removeItem","querySelector","classList","remove","setItem","cancelAudio","toFocus","contains","this","focus","playPauseGroup","group","currentUtterance","config","state","resume","utteranceEnd","setState","hideControlBar","hideCancelButton","text","showCancelButton","showControlBar","init","setupUI","callback","voices","failedToLoadVoices","speechSynthesis","result","u","SpeechSynthesisUtterance","lang","rate","length","i","indexOf","name","voice","utteranceFinished","error","thisUtterance","finished","setTimeout","onend","onerror","speak","getVoices","undefined","onvoiceschanged","Error","initSynthesis","synthesis","initRITM","selectors","controlBar","add","contentGroups","ritmOptionalTrackingIdentifier","dataset","wrapperElement","controlBubbleElement","wrapper","createElement","controlBubble","tabIndex","innerHTML","pausePlayButton","cancelButton","focusInListener","stopPropagation","focusOutListener","playPauseListener","cancelListener","addEventListener","disabled","destroy","removeEventListener","createRITMGroup","push","controlBarElement","setAttribute","inputSwitch","target","checked","relatedTarget","docBody","body","status","createControlBar","ritm","isEnabled","currentUtteranceIdentifier","currentGroup","eventTracking","domInit"],"mappings":"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"}